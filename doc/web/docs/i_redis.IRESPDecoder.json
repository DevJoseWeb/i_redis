{"name":"IRESPDecoder","qualifiedName":"i_redis.IRESPDecoder","comment":"","isAbstract":false,"superclass":"i_redis.Converter","implements":[],"subclass":[],"variables":{"ARRAY":{"name":"ARRAY","qualifiedName":"i_redis.IRESPDecoder.ARRAY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BULK_STRING":{"name":"BULK_STRING","qualifiedName":"i_redis.IRESPDecoder.BULK_STRING","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"CR":{"name":"CR","qualifiedName":"i_redis.IRESPDecoder.CR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"ERROR":{"name":"ERROR","qualifiedName":"i_redis.IRESPDecoder.ERROR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"INTEGER":{"name":"INTEGER","qualifiedName":"i_redis.IRESPDecoder.INTEGER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LF":{"name":"LF","qualifiedName":"i_redis.IRESPDecoder.LF","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SIMPLE_STRING":{"name":"SIMPLE_STRING","qualifiedName":"i_redis.IRESPDecoder.SIMPLE_STRING","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"allocate":{"name":"allocate","qualifiedName":"i_redis.IRESPDecoder.allocate","comment":"","commentFrom":"i_redis.IRESPDecoder.allocate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"bindOnParsed":{"name":"bindOnParsed","qualifiedName":"i_redis.IRESPDecoder.bindOnParsed","comment":"","commentFrom":"i_redis.IRESPDecoder.bindOnParsed","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"onParsed":{"name":"onParsed","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bindOnParserError":{"name":"bindOnParserError","qualifiedName":"i_redis.IRESPDecoder.bindOnParserError","comment":"","commentFrom":"i_redis.IRESPDecoder.bindOnParserError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"onError":{"name":"onError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bufferToString":{"name":"bufferToString","qualifiedName":"i_redis.IRESPDecoder.bufferToString","comment":"","commentFrom":"i_redis.IRESPDecoder.bufferToString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"i_redis.IRESPDecoder.convert","comment":"<p>Converts input and returns the result of the conversion.</p>","commentFrom":"i_redis.Converter.convert","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cutPackage":{"name":"cutPackage","qualifiedName":"i_redis.IRESPDecoder.cutPackage","comment":"","commentFrom":"i_redis.IRESPDecoder.cutPackage","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"i_redis.IRESPDecoder.parse","comment":"","commentFrom":"i_redis.IRESPDecoder.parse","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"i_redis.IRESPDecoder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>i_redis.IRESPDecoder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"i_redis.IRESPDecoder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"i_redis.IRESPDecoder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>i_redis.IRESPDecoder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>i_redis.IRESPDecoder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"i_redis.IRESPDecoder.bind","comment":"","commentFrom":"","inheritedFrom":"i_redis.Converter.bind","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"i_redis.IRESPDecoder.convert","comment":"<p>Converts <a>i_redis.IRESPDecoder.convert.input</a> and returns the result of the conversion.</p>","commentFrom":"","inheritedFrom":"i_redis.Converter.convert","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"i_redis.Converter.S","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"i_redis.IRESPDecoder.fuse","comment":"<p>Fuses <code>this</code> with <a>i_redis.IRESPDecoder.fuse.other</a>.</p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this</code> before converting with <code>other</code>.</p>","commentFrom":"","inheritedFrom":"i_redis.Converter.fuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"i_redis.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"i_redis.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"i_redis.IRESPDecoder.noSuchMethod","comment":"<p><a>i_redis.IRESPDecoder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>i_redis.IRESPDecoder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>i_redis.IRESPDecoder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>i_redis.IRESPDecoder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"i_redis.IRESPDecoder.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>","commentFrom":"","inheritedFrom":"i_redis.Converter.startChunkedConversion","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Sink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"i_redis.IRESPDecoder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}